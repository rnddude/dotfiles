[user]
	name = rnddude
	email = rnddude@icloud.com
[apply]
    # Detect whitespace errors when applying a patch
    whitespace = fix
[core]
    abbrev = 12
    attributesfile = ~/.gitattributes
    autocrlf = input
    excludesfile = ~/.gitignore
    # Treat spaces before tabs and all kinds of trailing whitespace as an error
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space
[diff]
    # Show blocks of moved text of at least 20
    # alphanumeric characters differently than adds/deletes.
    #
    # https://git-scm.com/docs/git-diff#git-diff-zebra
    colorMoved = zebra
[filter "lfs"]
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
[color "branch"]
    current = green bold
    local = green
    remote = yellow
[color "diff"]
    frag = magenta
    meta = yellow
    new = green
    old = red
    newMoved = cyan
    oldMoved = blue
[color "status"]
    added = green reverse
    changed = yellow reverse
    untracked = red reverse
[push]
	default = simple
[pretty]
    custom = "%C(magenta)%h%C(red)%d %C(yellow)%ar %C(green)%s %C(yellow)(%an)"
[alias]
	a  = add
    am   = commit --amend
    br  = branch
	c = commit -m
	ca = commit -am
	co = checkout
	cp  = cherry-pick
  	d = diff
	dc = diff --cached
	f = fetch
	#l = log --graph --pretty=format:"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset" --abbrev-commit
    g   = log --graph --pretty=custom           # Show custom graph.
    l   = log --pretty=custom                   # Show custom log.
    lc  = shortlog --email --numbered --summary # List contributors.
    p   = push
    r   = rebase
    s   = status
    # List remote branches.
    lrb = "!f() { \
        remote="${1:-origin}"; \
        git ls-remote --heads "$remote"; \
    }; f"
    # Remove the tag with the specified tag name if
    # exists and tag the latest commit with that name.
    retag = "!f() { \
        git tag -d "$1" &> /dev/null; \
        git tag $1; \
    }; f"
    # Find commits by source code.s
    cc = "!f() { \
        git log --pretty=custom --decorate --date=short -S\"$1\"; \
    }; f"
    # Find commits by commit message.
    cm = "!f() { \
        git log --pretty=custom --decorate --date=short --grep=\"$1\"; \
    }; f"
    # Remove last commits (by default it removes the last commit).
    rlc = "!f() { \
        declare n=\"${1:-1}\"; \
        git reset --hard \"HEAD~$n\"; \
    }; f"
    # Undo last commits (by default it undoes the last commit).
    ulc = "!f() { \
        declare n=\"${1:-1}\"; \
        git reset --soft \"HEAD~$n\"; \
    }; f"
